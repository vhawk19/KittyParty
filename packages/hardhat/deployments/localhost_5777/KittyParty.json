{"metadata":"{\"compiler\":{\"version\":\"0.7.6\"},\"sources\":{\"contracts/KittyParty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.6;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract KittyParty is VRFConsumerBase {\\r\\n    bytes32 internal keyHash;\\r\\n    uint256 internal fee;\\r\\n\\r\\n    struct AddressList {\\r\\n        address[] array; // An unordered list of unique values\\r\\n        mapping(address => bool) won;\\r\\n        address[] possible_winners;\\r\\n        mapping(address => bool) exists; // Tracks if a given value exists in the list\\r\\n        mapping(address => uint256) index; // Tracks the index of a value\\r\\n        mapping(address => uint256) balance; //Tracks the  pendingWithdrawals\\r\\n    }\\r\\n    // The member list keeps strack of all the memebers, their respective balances in the kitty party contract.\\r\\n    // Members include the kittens + kitty kreator\\r\\n    // The kitty kreator would be the first member in the list\\r\\n    // The number of rounds in the kitty party hence would be equivalent to number of members - 1\\r\\n\\r\\n    struct StakeInfo {\\r\\n        uint256 kreatorSecurity;\\r\\n        uint256 kittenPool;\\r\\n        address stakeTokenAddress;\\r\\n        uint256 noOfStakeTokens;\\r\\n    }\\r\\n\\r\\n    enum KittyPartyState {\\r\\n        Verification,\\r\\n        Collection,\\r\\n        Staking,\\r\\n        Payout,\\r\\n        Completed,\\r\\n        Trap\\r\\n    } //Set of valid states for the kitty party contract\\r\\n    //Verification: The Pre-Round verification is ongoing\\r\\n    //Collection: Pre-Round verification completed, collection criteria can be checked for\\r\\n    //Staking: The colection has been completed successfully, the asset can now be staked on respective protocols\\r\\n    //Payout: The assets are withdrawn from the repective contracts, a winner is chosen at random\\r\\n    //Completed: THe kitty-party is over\\r\\n    //Trap: INVALID STATE!!\\r\\n    KittyPartyState currentState = KittyPartyState.Verification;\\r\\n    //initial state is verification state\\r\\n\\r\\n    uint256 public roundDuration; //Duration of round in days\\r\\n    uint256 public amountPerRound; //Amount of eth to be pooled by the kittens\\r\\n    uint256 public currentRound = 0; //Counter to keep track of the rounds\\r\\n    bool public staked = false;\\r\\n    address public winnerAddress;\\r\\n    uint256 public amountWon;\\r\\n\\r\\n    AddressList internal memberList;\\r\\n    StakeInfo internal stakeDetail;\\r\\n    \\r\\n    address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ;\\r\\n    address internal constant UNISWAP_WETH_DAI_PAIR_ADDRESS = 0x8B22F85d0c844Cf793690F6D9DFE9F11Ddb35449;\\r\\n    address internal constant DAI_ADDRESS = 0xc7AD46e0b8a400Bb3C915120d284AafbA8fc4735;\\r\\n    IUniswapV2Router02 public uniswapRouter;\\r\\n    IERC20 public dai;\\r\\n    IERC20 public uni_token;\\r\\n\\r\\n    event Deposit(address indexed _from, uint256 _value);\\r\\n\\r\\n    event Withdraw(address indexed _to, uint256 _value);\\r\\n\\r\\n    event Verified(bool verificationState, uint256 indexed roundNumber);\\r\\n\\r\\n    event Completed(bool completedState);\\r\\n\\r\\n    event CollectedFromKitten(\\r\\n        address indexed kittenAddress,\\r\\n        uint256 amount,\\r\\n        uint256 roundNumber\\r\\n    );\\r\\n\\r\\n    event Staked(StakeInfo stakeDetails, uint256 roundNumber);\\r\\n\\r\\n    event WithdrawnFromStaking(uint256 amount, uint256 roundNumber);\\r\\n\\r\\n    event LotteryWinner(\\r\\n        address indexed winner,\\r\\n        uint256 amountWon,\\r\\n        uint256 roundNumber\\r\\n    );\\r\\n    \\r\\n    event RoundCompled(uint256 indexed roundNumber);\\r\\n    constructor()\\r\\n        public\\r\\n        VRFConsumerBase(\\r\\n            0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B, // VRF Coordinator\\r\\n            0x01BE23585060835E02B77ef475b0Cc51aA1e0709 // LINK Token\\r\\n        )\\r\\n    {\\r\\n        keyHash = 0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311;\\r\\n        fee = 0.1 * 10**18; // 0.1 LINK (varies by network)\\r\\n        uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\\r\\n        dai = IERC20(DAI_ADDRESS);\\r\\n        uni_token = IERC20(UNISWAP_WETH_DAI_PAIR_ADDRESS);\\r\\n    }\\r\\n\\r\\n\\r\\n//Used to initialize the contract, the minimal info required for the contract to function\\r\\n// requires a list of member addresses, the first addres in the member list should be the address  of the kitty kreator\\r\\n// the number of rounds would be memberlist length -1\\r\\n// amount per round would be the amount per round\\r\\n    function initialize(address[] memory memberAddress, uint256 _amountPerRound) \\r\\n        public\\r\\n    {\\r\\n        for (uint256 i = 0; i < memberAddress.length; i++) {\\r\\n            add(memberAddress[i]);\\r\\n        }\\r\\n        amountPerRound = _amountPerRound;\\r\\n    }\\r\\n\\r\\n    function add(address value) public returns (bool success) {\\r\\n        // Only add 'value' if it does not exist in the list\\r\\n        if (memberList.exists[value]) return false;\\r\\n\\r\\n        memberList.index[value] = memberList.array.length;\\r\\n        memberList.exists[value] = true;\\r\\n        memberList.array.push(value);\\r\\n        memberList.possible_winners.push(value);\\r\\n        memberList.balance[value] = 0;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getList() public view returns (address[] memory) {\\r\\n        return memberList.array;\\r\\n    }\\r\\n\\r\\n    function getLength() public view returns (uint256) {\\r\\n        return memberList.array.length - 1;\\r\\n    }\\r\\n\\r\\n    function getValueAt(uint256 i) public view returns (address) {\\r\\n        return memberList.array[i];\\r\\n    }\\r\\n\\r\\n    function getIndex(address ad) public view returns (uint256) {\\r\\n        return memberList.index[ad];\\r\\n    }\\r\\n\\r\\n    function isKittyPartyActive() public returns (bool) {\\r\\n        if (\\r\\n            currentState == KittyPartyState.Trap ||\\r\\n            currentState == KittyPartyState.Completed\\r\\n        ) return false;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    \\r\\n\\r\\n    function deposit() public payable {\\r\\n        require(\\r\\n            memberList.exists[msg.sender],\\r\\n            \\\"User not registered with the kitty party contract, kindly check with your kitty kreator\\\"\\r\\n        );\\r\\n        memberList.balance[msg.sender] += msg.value;\\r\\n        emit Deposit(msg.sender, msg.value);\\r\\n    }\\r\\n    \\r\\n    function depositAmount(uint256 amount) public payable {\\r\\n        \\r\\n        require(\\r\\n            memberList.exists[msg.sender],\\r\\n            \\\"User not registered with the kitty party contract, kindly check with your kitty kreator\\\"\\r\\n        );\\r\\n        memberList.balance[msg.sender] += msg.value;\\r\\n        emit Deposit(msg.sender, msg.value);\\r\\n    } \\r\\n\\r\\n    function withdraw(uint256 amount) public {\\r\\n        uint256 currentBalance = memberList.balance[msg.sender];\\r\\n        require(amount <= currentBalance, \\\"Insufficient Balance\\\");\\r\\n        memberList.balance[msg.sender] -= amount;\\r\\n        payable(msg.sender).transfer(amount);\\r\\n        emit Withdraw(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function withdrawAll() public {\\r\\n        uint256 currentBalance = memberList.balance[msg.sender];\\r\\n        memberList.balance[msg.sender] = 0;\\r\\n        payable(msg.sender).transfer(currentBalance);\\r\\n        emit Withdraw(msg.sender, currentBalance);\\r\\n    }\\r\\n    \\r\\n    function completeKittyParty() public {\\r\\n        currentState = KittyPartyState.Completed;\\r\\n    }\\r\\n\\r\\n    function verify() public {\\r\\n        require(\\r\\n            memberList.balance[getValueAt(0)] >= amountPerRound,\\r\\n            \\\"Insufficient Funds, kindly top up the smart contract\\\"\\r\\n        );\\r\\n        require(isKittyPartyActive(), \\\"Kitty Party is not Active\\\");\\r\\n        if (currentRound == getLength()) {\\r\\n            completeKittyParty();\\r\\n        }\\r\\n        currentState = KittyPartyState.Collection;\\r\\n        emit Verified(true, currentRound);\\r\\n    }\\r\\n\\r\\n    function collectFromKittens() public returns (uint256 amountCollected) {\\r\\n        uint256 amountToBeCollectedFromKitten =\\r\\n            amountPerRound / getLength();\\r\\n        for (uint256 i = 1; i <= getLength(); i++) {\\r\\n            address kittenAddress = getValueAt(i);\\r\\n            if (\\r\\n                memberList.balance[kittenAddress] >=\\r\\n                amountToBeCollectedFromKitten\\r\\n            ) {\\r\\n                amountCollected += amountToBeCollectedFromKitten;\\r\\n                memberList.balance[\\r\\n                    kittenAddress\\r\\n                ] -= amountToBeCollectedFromKitten;\\r\\n                emit CollectedFromKitten(\\r\\n                    kittenAddress,\\r\\n                    amountCollected,\\r\\n                    currentRound\\r\\n                );\\r\\n            } else {\\r\\n                amountCollected += memberList.balance[kittenAddress];\\r\\n                memberList.balance[kittenAddress] = 0;\\r\\n                emit CollectedFromKitten(\\r\\n                    kittenAddress,\\r\\n                    amountCollected,\\r\\n                    currentRound\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        return amountCollected;\\r\\n    }\\r\\n\\r\\n    function collection() public {\\r\\n        require(\\r\\n            currentState == KittyPartyState.Collection,\\r\\n            \\\"Not in collection state\\\"\\r\\n        );\\r\\n        stakeDetail.kittenPool = amountPerRound;\\r\\n        stakeDetail.kreatorSecurity = collectFromKittens();\\r\\n        stakeDetail.stakeTokenAddress = UNISWAP_WETH_DAI_PAIR_ADDRESS;\\r\\n        memberList.balance[getValueAt(0)] = memberList.balance[getValueAt(0)] - amountPerRound;\\r\\n        stakeDetail.noOfStakeTokens = addLiquidityFromEth(stakeDetail.kittenPool + stakeDetail.kreatorSecurity);\\r\\n        emit Staked(stakeDetail, currentRound);\\r\\n        currentState = KittyPartyState.Staking;\\r\\n        staked = true;\\r\\n    }\\r\\n\\r\\n    function withdrawFromStaking() public {\\r\\n        //call the lp contract, transfer the asset back to address(this)\\r\\n        amountWon = removeLiquidityFromEth(stakeDetail.noOfStakeTokens);\\r\\n        staked = false;\\r\\n        //sendToPlatform\\r\\n        emit WithdrawnFromStaking(amountWon, currentRound);\\r\\n        if (stakeDetail.kittenPool > stakeDetail.kreatorSecurity) {\\r\\n            //send .02*amountPerRound to platform\\r\\n        } else {\\r\\n            memberList.balance[getValueAt(0)] = 102 * amountPerRound/100;\\r\\n        }\\r\\n        amountWon -= 102 * amountPerRound/100;\\r\\n        currentState = KittyPartyState.Payout;\\r\\n        bytes32 result = runLottery(now);\\r\\n    }\\r\\n\\r\\n    function completeRound() internal {\\r\\n        emit RoundCompled(currentRound);\\r\\n        currentRound += 1;\\r\\n    }\\r\\n\\r\\n    function sendMoneyToWinner() public {\\r\\n        memberList.balance[winnerAddress] += amountWon;\\r\\n        memberList.won[winnerAddress] = true;\\r\\n        delete memberList.possible_winners[getIndex(winnerAddress)];\\r\\n        emit LotteryWinner(winnerAddress, amountWon, currentRound);\\r\\n        completeRound();\\r\\n    }\\r\\n\\r\\n    function runLottery(uint256 userProvidedSeed)\\r\\n        public\\r\\n        returns (bytes32 requestId)\\r\\n    {\\r\\n        require(\\r\\n            LINK.balanceOf(address(this)) >= fee,\\r\\n            \\\"Not enough LINK - fill contract with faucet\\\"\\r\\n        );\\r\\n        return requestRandomness(keyHash, fee, userProvidedSeed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Callback function used by VRF Coordinator\\r\\n     */\\r\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        uint256 winnerPoolLength = getLength() - currentRound;\\r\\n        uint256 randomResult = (randomness % winnerPoolLength) + 1;\\r\\n        winnerAddress = memberList.possible_winners[randomResult];\\r\\n        sendMoneyToWinner();\\r\\n    }\\r\\n    \\r\\n    function getBalance(address ad) public view returns(uint256){\\r\\n        return memberList.balance[ad];\\r\\n    }\\r\\n    \\r\\n    function addLiquidityFromEth(uint ethAmountIn) public returns(uint) {\\r\\n        uint ethAmount = ethAmountIn/2;\\r\\n        uint daiAmount = convertEthToDai(ethAmount);\\r\\n        require(dai.approve(address(uniswapRouter), daiAmount), 'approve failed.');\\r\\n        uint amountToken;\\r\\n        uint amountETH;\\r\\n        uint liquidity;\\r\\n        (amountToken, amountETH, liquidity) = uniswapRouter.addLiquidityETH{value: ethAmount}(DAI_ADDRESS, daiAmount,\\r\\n        daiAmount - 5000000000000000, ethAmount - 100000000000000, address(this), block.timestamp + 15);\\r\\n        return liquidity;\\r\\n    }\\r\\n    \\r\\n    // TODO: amountTokenMin, amountETHMin, and find a way to keep track of Uni tokens per account\\r\\n    // Automatically sends back ETH to user\\r\\n    function removeLiquidityFromEth(uint uniAmountOut) public returns(uint) {\\r\\n        require(uni_token.approve(address(uniswapRouter), uniAmountOut), 'approve failed.');\\r\\n        uint amountDai;\\r\\n        uint amountEth;\\r\\n        (amountDai, amountEth) = uniswapRouter.removeLiquidityETH(DAI_ADDRESS, uniAmountOut, 0, 0, address(this), block.timestamp + 15);\\r\\n        amountEth += convertDaiToEth(amountDai);\\r\\n        msg.sender.transfer(amountEth);\\r\\n        return amountEth;\\r\\n    }\\r\\n    \\r\\n    // Assumes that contract already has Dai\\r\\n    function addLiquidityFromDai(uint daiAmountIn) public {\\r\\n        uint daiAmount = daiAmountIn/2;\\r\\n        uint ethAmount = convertDaiToEth(daiAmount);\\r\\n        require(dai.approve(address(uniswapRouter), daiAmount), 'approve failed.');\\r\\n        uniswapRouter.addLiquidityETH{ value: ethAmount }(DAI_ADDRESS, daiAmount,\\r\\n        daiAmount - 5000000000000000, ethAmount, address(this), block.timestamp + 15);\\r\\n    }\\r\\n    \\r\\n    // TODO: amountTokenMin, amountETHMin, and find a way to keep track of Uni tokens per account\\r\\n    // NOTE: Does NOT automatically send back DAI to user\\r\\n    function removeLiquidityFromDai(uint uniAmountOut) public {\\r\\n        require(uni_token.approve(address(uniswapRouter), uniAmountOut), 'approve failed.');\\r\\n        uint amountDai;\\r\\n        uint amountEth;\\r\\n        (amountDai, amountEth) = uniswapRouter.removeLiquidityETH(DAI_ADDRESS, uniAmountOut, 0, 0, address(this), block.timestamp + 15);\\r\\n        amountDai += convertEthToDai(amountEth);\\r\\n    }\\r\\n    \\r\\n    function convertDaiToEth(uint daiAmount) private returns(uint) {\\r\\n        // amountOutMin must be retrieved from an oracle of some kind\\r\\n        uint amountOutMin = getEstimatedETHforDAI(daiAmount)[1];\\r\\n        require(dai.approve(address(uniswapRouter), daiAmount), 'approve failed.');\\r\\n        uniswapRouter.swapExactTokensForETH(daiAmount, amountOutMin, getPathForDAItoETH(), address(this), block.timestamp);\\r\\n        return amountOutMin;\\r\\n    }\\r\\n    \\r\\n    function convertEthToDai(uint ethAmount) private returns(uint) {\\r\\n        uint deadline = block.timestamp + 15; // using 'now' for convenience, for mainnet pass deadline from frontend!\\r\\n        uint amountDai = getEstimatedDAIforETH(ethAmount)[1];\\r\\n        uniswapRouter.swapETHForExactTokens{ value: ethAmount }(amountDai, getPathForETHtoDAI(), address(this), deadline);\\r\\n        return amountDai;\\r\\n        // refund leftover ETH to user\\r\\n        // (bool success,) = msg.sender.call{ value: address(this).balance }(\\\"\\\");\\r\\n        // require(success, \\\"refund failed\\\");\\r\\n    }\\r\\n    \\r\\n    function getEstimatedETHforDAI(uint daiAmount) public view returns (uint[] memory) {\\r\\n        return uniswapRouter.getAmountsOut(daiAmount, getPathForDAItoETH());\\r\\n    }\\r\\n    \\r\\n    function getEstimatedDAIforETH(uint ethAmount) public view returns (uint[] memory) {\\r\\n        return uniswapRouter.getAmountsOut(ethAmount, getPathForETHtoDAI());\\r\\n    }\\r\\n\\r\\n    function getPathForETHtoDAI() private view returns (address[] memory) {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = uniswapRouter.WETH();\\r\\n        path[1] = address(DAI_ADDRESS);\\r\\n        return path;\\r\\n    }\\r\\n    \\r\\n    function getPathForDAItoETH() private view returns (address[] memory) {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(DAI_ADDRESS);\\r\\n        path[1] = uniswapRouter.WETH();\\r\\n        return path;\\r\\n    }\\r\\n    \\r\\n    function checkDaiBalance() public view returns (uint256) {\\r\\n         return dai.balanceOf(address(this));\\r\\n    }\\r\\n    \\r\\n    function checkUniBalance() public view returns (uint256) {\\r\\n         return uni_token.balanceOf(address(this));\\r\\n    }\\r\\n    \\r\\n    // important to receive ETH\\r\\n    receive() payable external {}\\r\\n}\"},\"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\"},\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\"},\"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\\n    address _requester, uint256 _nonce)\\n    internal pure returns (uint256)\\n  {\\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\"},\"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  using SafeMathChainlink for uint256;\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\\n    internal virtual;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   * @param _seed seed mixed into the input of the VRF.\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)\\n    internal returns (bytes32 requestId)\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash].add(1);\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) public {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"}}}","address":"0x06E0B70fe3E1F6473b68891F15D8B67460D22b3c","bytecode":"0x60c06040526003805460ff19908116909155600060065560078054909116905534801561002b57600080fd5b507fb3dccb4cf7a26f6cf6b120cf5a73875b7bbc655b00000000000000000000000060a0527f01be23585060835e02b77ef475b0cc51aa1e07090000000000000000000000006080527f2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c131160015567016345785d8a0000600255601380546001600160a01b0319908116737a250d5630b4cf539739df2c5dacb4c659f2488d1790915560148054821673c7ad46e0b8a400bb3c915120d284aafba8fc473517905560158054909116738b22f85d0c844cf793690f6d9dfe9f11ddb354491790557301be23585060835e02b77ef475b0cc51aa1e070973b3dccb4cf7a26f6cf6b120cf5a73875b7bbc655b61265761015b600039806112135280611d0d5250806117675280611cde52506126576000f3fe60806040526004361061021e5760003560e01c8063942b765a11610123578063bf428ace116100ab578063f7cb789a1161006f578063f7cb789a1461058b578063f8b2cb4f146105a0578063fb2f895d146105c0578063fc735e99146105d5578063fe75ff54146105ea57610225565b8063bf428ace14610524578063c4b0918814610539578063d0e30db014610559578063ed7a4e0b14610561578063f4b9fa751461057657610225565b8063afeaac19116100f2578063afeaac19146104a5578063b1434b54146104ba578063b31610db146104cf578063bc6b888b146104ef578063be1c766b1461050f57610225565b8063942b765a1461042e57806394985ddd14610450578063a6676ba014610470578063ada8b83d1461048557610225565b806360b5bb3f116101a6578063848836d011610175578063848836d0146103bc578063853828b6146103dc57806387f8ab26146103f15780638a19c8bc1461040457806390704b291461041957610225565b806360b5bb3f146103455780636339d7cf14610365578063735de9f7146103855780637de1e536146103a757610225565b80632a7b1541116101ed5780632a7b1541146102b95780632e13a30d146102ce5780632e1a7d4d146102e3578063395160ec14610303578063561a5aca1461031857610225565b80630a3b0a4f1461022a5780630b76619b1461026057806328102e541461027557806329d353281461029757610225565b3661022557005b600080fd5b34801561023657600080fd5b5061024a610245366004611ebe565b61060a565b604051610257919061226c565b60405180910390f35b34801561026c57600080fd5b5061024a6106f2565b34801561028157600080fd5b5061028a6106fb565b6040516102579190612277565b3480156102a357600080fd5b506102b76102b2366004612072565b610701565b005b3480156102c557600080fd5b5061028a610876565b3480156102da57600080fd5b506102b761087c565b3480156102ef57600080fd5b506102b76102fe366004612072565b610952565b34801561030f57600080fd5b5061028a610a07565b34801561032457600080fd5b50610338610333366004612072565b610b30565b6040516102579190612228565b34801561035157600080fd5b506102b7610360366004611ef6565b610bc4565b34801561037157600080fd5b506102b7610380366004612072565b610bfc565b34801561039157600080fd5b5061039a610d5a565b6040516102579190612143565b3480156103b357600080fd5b506102b7610d69565b3480156103c857600080fd5b5061028a6103d7366004612072565b610e9b565b3480156103e857600080fd5b506102b761101b565b6102b76103ff366004612072565b6110a1565b34801561041057600080fd5b5061028a611117565b34801561042557600080fd5b5061028a61111d565b34801561043a57600080fd5b506104436111a3565b6040516102579190612215565b34801561045c57600080fd5b506102b761046b366004612051565b611208565b34801561047c57600080fd5b506102b761125a565b34801561049157600080fd5b506103386104a0366004612072565b611337565b3480156104b157600080fd5b5061024a611354565b3480156104c657600080fd5b5061039a611398565b3480156104db57600080fd5b5061028a6104ea366004611ebe565b6113a7565b3480156104fb57600080fd5b5061039a61050a366004612072565b6113c2565b34801561051b57600080fd5b5061028a6113ef565b34801561053057600080fd5b506102b76113f9565b34801561054557600080fd5b5061028a610554366004612072565b611408565b6102b761159c565b34801561056d57600080fd5b5061039a61161c565b34801561058257600080fd5b5061039a611630565b34801561059757600080fd5b5061028a61163f565b3480156105ac57600080fd5b5061028a6105bb366004611ebe565b611645565b3480156105cc57600080fd5b5061028a611660565b3480156105e157600080fd5b506102b7611691565b3480156105f657600080fd5b5061028a610605366004612072565b611760565b6001600160a01b0381166000908152600c602052604081205460ff1615610633575060006106ed565b50600980546001600160a01b0383166000818152600d6020908152604080832094909455600c8152838220805460ff1916600190811790915585548082019096557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90950180546001600160a01b03199081168517909155600b80548088019091557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901805490911684179055918152600e909152908120555b919050565b60075460ff1681565b60085481565b6002810460006107108261182e565b60145460135460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926107489216908690600401612157565b602060405180830381600087803b15801561076257600080fd5b505af1158015610776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079a9190612031565b6107bf5760405162461bcd60e51b81526004016107b69061247c565b60405180910390fd5b60135460405163f305d71960e01b81526001600160a01b039091169063f305d71990839061081c9073c7ad46e0b8a400bb3c915120d284aafba8fc47359087906611c37937e07fff1982019085903090600f4201906004016121da565b6060604051808303818588803b15801561083557600080fd5b505af1158015610849573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061086e91906120c5565b505050505050565b60055481565b60125461088890611408565b60088190556007805460ff191690556006546040517f8317d9222511a7f7bc22dd91f4aa793e06ea6613f8aa605607f0bbd091c88aff926108ca929091612135565b60405180910390a1600f5460105411156108e35761091b565b6064600554606602816108f257fe5b04600e6000610900816113c2565b6001600160a01b031681526020810191909152604001600020555b60646005546066028161092a57fe5b600880549290910490910390556003805460ff191681179055600061094e42611760565b5050565b336000908152600e6020526040902054808211156109825760405162461bcd60e51b81526004016107b69061244e565b336000818152600e6020526040808220805486900390555184156108fc0291859190818181858888f193505050501580156109c1573d6000803e3d6000fd5b50336001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364836040516109fb9190612277565b60405180910390a25050565b600080610a126113ef565b60055481610a1c57fe5b04905060015b610a2a6113ef565b8111610b2a576000610a3b826113c2565b6001600160a01b0381166000908152600e60205260409020549091508311610ac2576001600160a01b0381166000818152600e602052604090819020805486900390556006549051958501957fda48cb88f08166033de7ce0df8e720f839529e1d13882821a01542fbedd41f5891610ab591889190612135565b60405180910390a2610b21565b6001600160a01b0381166000818152600e60205260408082208054929055600654905196909101957fda48cb88f08166033de7ce0df8e720f839529e1d13882821a01542fbedd41f5891610b1891889190612135565b60405180910390a25b50600101610a22565b50505b90565b6013546060906001600160a01b031663d06ca61f83610b4d611991565b6040518363ffffffff1660e01b8152600401610b6a929190612530565b60006040518083038186803b158015610b8257600080fd5b505afa158015610b96573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bbe9190810190611f9e565b92915050565b60005b8251811015610bf557610bec838281518110610bdf57fe5b602002602001015161060a565b50600101610bc7565b5060055550565b60155460135460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610c32929116908590600401612157565b602060405180830381600087803b158015610c4c57600080fd5b505af1158015610c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c849190612031565b610ca05760405162461bcd60e51b81526004016107b69061247c565b601354604051629d473b60e21b815260009182916001600160a01b03909116906302751cec90610cf59073c7ad46e0b8a400bb3c915120d284aafba8fc4735908790869081903090600f4201906004016121da565b6040805180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4691906120a2565b9092509050610d5481611a9d565b50505050565b6013546001600160a01b031681565b600160035460ff166005811115610d7c57fe5b14610d995760405162461bcd60e51b81526004016107b69061235e565b600554601055610da7610a07565b600f55601180546001600160a01b031916738b22f85d0c844cf793690f6d9dfe9f11ddb35449179055600554600e6000610de0816113c2565b6001600160a01b03166001600160a01b03168152602001908152602001600020540360096005016000610e1360006113c2565b6001600160a01b03168152602081019190915260400160002055600f54601054610e3d9101610e9b565b6012556006546040517f62c285e766c871f1c8f15b69db26d7f4ed79769f5ab82248f5cacf97a05c06a891610e7591600f91906124f9565b60405180910390a16003805460ff19908116600217909155600780549091166001179055565b60006002820481610eab82611a9d565b60145460135460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392610ee39216908590600401612157565b602060405180830381600087803b158015610efd57600080fd5b505af1158015610f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f359190612031565b610f515760405162461bcd60e51b81526004016107b69061247c565b60135460405163f305d71960e01b8152600091829182916001600160a01b03169063f305d719908790610fbc9073c7ad46e0b8a400bb3c915120d284aafba8fc47359089906611c37937e07fff19820190655af3107a3fff198601903090600f4201906004016121da565b6060604051808303818588803b158015610fd557600080fd5b505af1158015610fe9573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061100e91906120c5565b9998505050505050505050565b336000818152600e6020526040808220805490839055905190929183156108fc02918491818181858888f1935050505015801561105c573d6000803e3d6000fd5b50336001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364826040516110969190612277565b60405180910390a250565b336000908152600c602052604090205460ff166110d05760405162461bcd60e51b81526004016107b6906122db565b336000818152600e60205260409081902080543490810190915590517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9161109691612277565b60065481565b6015546040516370a0823160e01b81526000916001600160a01b0316906370a082319061114e903090600401612143565b60206040518083038186803b15801561116657600080fd5b505afa15801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e919061208a565b905090565b606060096000018054806020026020016040519081016040528092919081815260200182805480156111fe57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111e0575b5050505050905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112505760405162461bcd60e51b81526004016107b690612417565b61094e8282611b59565b600854600780546001600160a01b036101009182900481166000908152600e602090815260408083208054909701909655845484900483168252600a905293909320805460ff191660011790559054600b926112b992909104166113a7565b815481106112c357fe5b600091825260209091200180546001600160a01b03191690556007546008546006546040516101009093046001600160a01b0316927fff8ab71428121b903312f0811ef90ea93038df4601bb6c494a2f185b39c3eb3d92611325929091612135565b60405180910390a2611335611bc4565b565b6013546060906001600160a01b031663d06ca61f83610b4d611bfb565b6000600560035460ff16600581111561136957fe5b14806113855750600460035460ff16600581111561138357fe5b145b1561139257506000610b2d565b50600190565b6015546001600160a01b031681565b6001600160a01b03166000908152600d602052604090205490565b6000600960000182815481106113d457fe5b6000918252602090912001546001600160a01b031692915050565b6009546000190190565b6003805460ff19166004179055565b60155460135460405163095ea7b360e01b81526000926001600160a01b039081169263095ea7b39261144292909116908690600401612157565b602060405180830381600087803b15801561145c57600080fd5b505af1158015611470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114949190612031565b6114b05760405162461bcd60e51b81526004016107b69061247c565b601354604051629d473b60e21b815260009182916001600160a01b03909116906302751cec906115059073c7ad46e0b8a400bb3c915120d284aafba8fc4735908890869081903090600f4201906004016121da565b6040805180830381600087803b15801561151e57600080fd5b505af1158015611532573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155691906120a2565b90925090506115648261182e565b604051910190339082156108fc029083906000818181858888f19350505050158015611594573d6000803e3d6000fd5b509392505050565b336000908152600c602052604090205460ff166115cb5760405162461bcd60e51b81526004016107b6906122db565b336000818152600e60205260409081902080543490810190915590517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9161161291612277565b60405180910390a2565b60075461010090046001600160a01b031681565b6014546001600160a01b031681565b60045481565b6001600160a01b03166000908152600e602052604090205490565b6014546040516370a0823160e01b81526000916001600160a01b0316906370a082319061114e903090600401612143565b600554600e60006116a1816113c2565b6001600160a01b03166001600160a01b031681526020019081526020016000205410156116e05760405162461bcd60e51b81526004016107b6906124a5565b6116e8611354565b6117045760405162461bcd60e51b81526004016107b6906123e0565b61170c6113ef565b600654141561171d5761171d6113f9565b6003805460ff1916600190811790915560065460405190917eae53892a7e4a911f143a0d9408a85b5e15f8bed5c739920096daafb3362cce91611612919061226c565b60006002547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016117b19190612143565b60206040518083038186803b1580156117c957600080fd5b505afa1580156117dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611801919061208a565b101561181f5760405162461bcd60e51b81526004016107b690612395565b610bbe60015460025484611cda565b60008061183a83611337565b60018151811061184657fe5b602090810291909101015160145460135460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926118899216908790600401612157565b602060405180830381600087803b1580156118a357600080fd5b505af11580156118b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118db9190612031565b6118f75760405162461bcd60e51b81526004016107b69061247c565b6013546001600160a01b03166318cbafe58483611912611bfb565b30426040518663ffffffff1660e01b8152600401611934959493929190612586565b600060405180830381600087803b15801561194e57600080fd5b505af1158015611962573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261198a9190810190611f9e565b5092915050565b6040805160028082526060808301845292839291906020830190803683375050601354604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c464892506004808301926020929190829003018186803b1580156119f957600080fd5b505afa158015611a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a319190611eda565b81600081518110611a3e57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505073c7ad46e0b8a400bb3c915120d284aafba8fc473581600181518110611a8057fe5b6001600160a01b0390921660209283029190910190910152905090565b6000600f420181611aad84610b30565b600181518110611ab957fe5b60209081029190910101516013549091506001600160a01b031663fb3bdb418583611ae2611991565b30876040518663ffffffff1660e01b8152600401611b039493929190612551565b6000604051808303818588803b158015611b1c57600080fd5b505af1158015611b30573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526115949190810190611f9e565b6000600654611b666113ef565b0390506000818381611b7457fe5b06600101905060096002018181548110611b8a57fe5b600091825260209091200154600780546001600160a01b0390921661010002610100600160a81b0319909216919091179055610d5461125a565b6006546040517f397602cd08be1b4960422dd722f67856ee9d9282d988fcbfc3004f6a765bb0ce90600090a2600680546001019055565b60408051600280825260608083018452928392919060208301908036833701905050905073c7ad46e0b8a400bb3c915120d284aafba8fc473581600081518110611c4157fe5b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b158015611c9557600080fd5b505afa158015611ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccd9190611eda565b81600181518110611a8057fe5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f0000000000000000000000000000000000000000000000000000000000000000858786604051602001611d40929190612135565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401611d6d93929190612170565b602060405180830381600087803b158015611d8757600080fd5b505af1158015611d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbf9190612031565b506000611de08584306000808a815260200190815260200160002054611e25565b600086815260208190526040902054909150611e0390600163ffffffff611e5f16565b600086815260208190526040902055611e1c8582611e8b565b95945050505050565b600084848484604051602001611e3e9493929190612280565b60408051601f19818403018152919052805160209091012095945050505050565b600082820183811015611e845760405162461bcd60e51b81526004016107b6906122a4565b9392505050565b60008282604051602001611ea0929190612135565b60405160208183030381529060405280519060200120905092915050565b600060208284031215611ecf578081fd5b8135611e8481612609565b600060208284031215611eeb578081fd5b8151611e8481612609565b60008060408385031215611f08578081fd5b823567ffffffffffffffff811115611f1e578182fd5b80840185601f820112611f2f578283fd5b80359150611f44611f3f836125e9565b6125c2565b808382526020808301925080840189828388028701011115611f64578687fd5b8694505b85851015611f8f578035611f7b81612609565b845260019490940193928101928101611f68565b50909896013596505050505050565b60006020808385031215611fb0578182fd5b825167ffffffffffffffff811115611fc6578283fd5b80840185601f820112611fd7578384fd5b80519150611fe7611f3f836125e9565b8281528381019082850185850284018601891015612003578687fd5b8693505b84841015612025578051835260019390930192918501918501612007565b50979650505050505050565b600060208284031215612042578081fd5b81518015158114611e84578182fd5b60008060408385031215612063578182fd5b50508035926020909101359150565b600060208284031215612083578081fd5b5035919050565b60006020828403121561209b578081fd5b5051919050565b600080604083850312156120b4578182fd5b505080516020909101519092909150565b6000806000606084860312156120d9578081fd5b8351925060208401519150604084015190509250925092565b6000815180845260208085019450808401835b8381101561212a5781516001600160a01b031687529582019590820190600101612105565b509495945050505050565b918252602082015260400190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b600060018060a01b038516825260208481840152606060408401528351806060850152825b818110156121b157858101830151858201608001528201612195565b818111156121c25783608083870101525b50601f01601f19169290920160800195945050505050565b6001600160a01b039687168152602081019590955260408501939093526060840191909152909216608082015260a081019190915260c00190565b600060208252611e8460208301846120f2565b6020808252825182820181905260009190848201906040850190845b8181101561226057835183529284019291840191600101612244565b50909695505050505050565b901515815260200190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526057908201527f55736572206e6f742072656769737465726564207769746820746865206b697460408201527f747920706172747920636f6e74726163742c206b696e646c7920636865636b2060608201527f7769746820796f7572206b69747479206b726561746f72000000000000000000608082015260a00190565b60208082526017908201527f4e6f7420696e20636f6c6c656374696f6e207374617465000000000000000000604082015260600190565b6020808252602b908201527f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060408201526a1dda5d1a0819985d58d95d60aa1b606082015260800190565b60208082526019908201527f4b69747479205061727479206973206e6f742041637469766500000000000000604082015260600190565b6020808252601f908201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604082015260600190565b602080825260149082015273496e73756666696369656e742042616c616e636560601b604082015260600190565b6020808252600f908201526e30b8383937bb32903330b4b632b21760891b604082015260600190565b60208082526034908201527f496e73756666696369656e742046756e64732c206b696e646c7920746f7020756040820152731c081d1a19481cdb585c9d0818dbdb9d1c9858dd60621b606082015260800190565b825481526001830154602082015260028301546001600160a01b031660408201526003909201546060830152608082015260a00190565b60008382526040602083015261254960408301846120f2565b949350505050565b60008582526080602083015261256a60808301866120f2565b6001600160a01b03949094166040830152506060015292915050565b600086825285602083015260a060408301526125a560a08301866120f2565b6001600160a01b0394909416606083015250608001529392505050565b60405181810167ffffffffffffffff811182821017156125e157600080fd5b604052919050565b600067ffffffffffffffff8211156125ff578081fd5b5060209081020190565b6001600160a01b038116811461261e57600080fd5b5056fea2646970667358221220b5153237cb0960d5cf6e46106d87469055b937727a191e3ee9e5682060e1aa3464736f6c63430006070033","deployedBytecode":"0x60806040526004361061021e5760003560e01c8063942b765a11610123578063bf428ace116100ab578063f7cb789a1161006f578063f7cb789a1461058b578063f8b2cb4f146105a0578063fb2f895d146105c0578063fc735e99146105d5578063fe75ff54146105ea57610225565b8063bf428ace14610524578063c4b0918814610539578063d0e30db014610559578063ed7a4e0b14610561578063f4b9fa751461057657610225565b8063afeaac19116100f2578063afeaac19146104a5578063b1434b54146104ba578063b31610db146104cf578063bc6b888b146104ef578063be1c766b1461050f57610225565b8063942b765a1461042e57806394985ddd14610450578063a6676ba014610470578063ada8b83d1461048557610225565b806360b5bb3f116101a6578063848836d011610175578063848836d0146103bc578063853828b6146103dc57806387f8ab26146103f15780638a19c8bc1461040457806390704b291461041957610225565b806360b5bb3f146103455780636339d7cf14610365578063735de9f7146103855780637de1e536146103a757610225565b80632a7b1541116101ed5780632a7b1541146102b95780632e13a30d146102ce5780632e1a7d4d146102e3578063395160ec14610303578063561a5aca1461031857610225565b80630a3b0a4f1461022a5780630b76619b1461026057806328102e541461027557806329d353281461029757610225565b3661022557005b600080fd5b34801561023657600080fd5b5061024a610245366004611ebe565b61060a565b604051610257919061226c565b60405180910390f35b34801561026c57600080fd5b5061024a6106f2565b34801561028157600080fd5b5061028a6106fb565b6040516102579190612277565b3480156102a357600080fd5b506102b76102b2366004612072565b610701565b005b3480156102c557600080fd5b5061028a610876565b3480156102da57600080fd5b506102b761087c565b3480156102ef57600080fd5b506102b76102fe366004612072565b610952565b34801561030f57600080fd5b5061028a610a07565b34801561032457600080fd5b50610338610333366004612072565b610b30565b6040516102579190612228565b34801561035157600080fd5b506102b7610360366004611ef6565b610bc4565b34801561037157600080fd5b506102b7610380366004612072565b610bfc565b34801561039157600080fd5b5061039a610d5a565b6040516102579190612143565b3480156103b357600080fd5b506102b7610d69565b3480156103c857600080fd5b5061028a6103d7366004612072565b610e9b565b3480156103e857600080fd5b506102b761101b565b6102b76103ff366004612072565b6110a1565b34801561041057600080fd5b5061028a611117565b34801561042557600080fd5b5061028a61111d565b34801561043a57600080fd5b506104436111a3565b6040516102579190612215565b34801561045c57600080fd5b506102b761046b366004612051565b611208565b34801561047c57600080fd5b506102b761125a565b34801561049157600080fd5b506103386104a0366004612072565b611337565b3480156104b157600080fd5b5061024a611354565b3480156104c657600080fd5b5061039a611398565b3480156104db57600080fd5b5061028a6104ea366004611ebe565b6113a7565b3480156104fb57600080fd5b5061039a61050a366004612072565b6113c2565b34801561051b57600080fd5b5061028a6113ef565b34801561053057600080fd5b506102b76113f9565b34801561054557600080fd5b5061028a610554366004612072565b611408565b6102b761159c565b34801561056d57600080fd5b5061039a61161c565b34801561058257600080fd5b5061039a611630565b34801561059757600080fd5b5061028a61163f565b3480156105ac57600080fd5b5061028a6105bb366004611ebe565b611645565b3480156105cc57600080fd5b5061028a611660565b3480156105e157600080fd5b506102b7611691565b3480156105f657600080fd5b5061028a610605366004612072565b611760565b6001600160a01b0381166000908152600c602052604081205460ff1615610633575060006106ed565b50600980546001600160a01b0383166000818152600d6020908152604080832094909455600c8152838220805460ff1916600190811790915585548082019096557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90950180546001600160a01b03199081168517909155600b80548088019091557f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901805490911684179055918152600e909152908120555b919050565b60075460ff1681565b60085481565b6002810460006107108261182e565b60145460135460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926107489216908690600401612157565b602060405180830381600087803b15801561076257600080fd5b505af1158015610776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079a9190612031565b6107bf5760405162461bcd60e51b81526004016107b69061247c565b60405180910390fd5b60135460405163f305d71960e01b81526001600160a01b039091169063f305d71990839061081c9073c7ad46e0b8a400bb3c915120d284aafba8fc47359087906611c37937e07fff1982019085903090600f4201906004016121da565b6060604051808303818588803b15801561083557600080fd5b505af1158015610849573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061086e91906120c5565b505050505050565b60055481565b60125461088890611408565b60088190556007805460ff191690556006546040517f8317d9222511a7f7bc22dd91f4aa793e06ea6613f8aa605607f0bbd091c88aff926108ca929091612135565b60405180910390a1600f5460105411156108e35761091b565b6064600554606602816108f257fe5b04600e6000610900816113c2565b6001600160a01b031681526020810191909152604001600020555b60646005546066028161092a57fe5b600880549290910490910390556003805460ff191681179055600061094e42611760565b5050565b336000908152600e6020526040902054808211156109825760405162461bcd60e51b81526004016107b69061244e565b336000818152600e6020526040808220805486900390555184156108fc0291859190818181858888f193505050501580156109c1573d6000803e3d6000fd5b50336001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364836040516109fb9190612277565b60405180910390a25050565b600080610a126113ef565b60055481610a1c57fe5b04905060015b610a2a6113ef565b8111610b2a576000610a3b826113c2565b6001600160a01b0381166000908152600e60205260409020549091508311610ac2576001600160a01b0381166000818152600e602052604090819020805486900390556006549051958501957fda48cb88f08166033de7ce0df8e720f839529e1d13882821a01542fbedd41f5891610ab591889190612135565b60405180910390a2610b21565b6001600160a01b0381166000818152600e60205260408082208054929055600654905196909101957fda48cb88f08166033de7ce0df8e720f839529e1d13882821a01542fbedd41f5891610b1891889190612135565b60405180910390a25b50600101610a22565b50505b90565b6013546060906001600160a01b031663d06ca61f83610b4d611991565b6040518363ffffffff1660e01b8152600401610b6a929190612530565b60006040518083038186803b158015610b8257600080fd5b505afa158015610b96573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bbe9190810190611f9e565b92915050565b60005b8251811015610bf557610bec838281518110610bdf57fe5b602002602001015161060a565b50600101610bc7565b5060055550565b60155460135460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610c32929116908590600401612157565b602060405180830381600087803b158015610c4c57600080fd5b505af1158015610c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c849190612031565b610ca05760405162461bcd60e51b81526004016107b69061247c565b601354604051629d473b60e21b815260009182916001600160a01b03909116906302751cec90610cf59073c7ad46e0b8a400bb3c915120d284aafba8fc4735908790869081903090600f4201906004016121da565b6040805180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4691906120a2565b9092509050610d5481611a9d565b50505050565b6013546001600160a01b031681565b600160035460ff166005811115610d7c57fe5b14610d995760405162461bcd60e51b81526004016107b69061235e565b600554601055610da7610a07565b600f55601180546001600160a01b031916738b22f85d0c844cf793690f6d9dfe9f11ddb35449179055600554600e6000610de0816113c2565b6001600160a01b03166001600160a01b03168152602001908152602001600020540360096005016000610e1360006113c2565b6001600160a01b03168152602081019190915260400160002055600f54601054610e3d9101610e9b565b6012556006546040517f62c285e766c871f1c8f15b69db26d7f4ed79769f5ab82248f5cacf97a05c06a891610e7591600f91906124f9565b60405180910390a16003805460ff19908116600217909155600780549091166001179055565b60006002820481610eab82611a9d565b60145460135460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b392610ee39216908590600401612157565b602060405180830381600087803b158015610efd57600080fd5b505af1158015610f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f359190612031565b610f515760405162461bcd60e51b81526004016107b69061247c565b60135460405163f305d71960e01b8152600091829182916001600160a01b03169063f305d719908790610fbc9073c7ad46e0b8a400bb3c915120d284aafba8fc47359089906611c37937e07fff19820190655af3107a3fff198601903090600f4201906004016121da565b6060604051808303818588803b158015610fd557600080fd5b505af1158015610fe9573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061100e91906120c5565b9998505050505050505050565b336000818152600e6020526040808220805490839055905190929183156108fc02918491818181858888f1935050505015801561105c573d6000803e3d6000fd5b50336001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364826040516110969190612277565b60405180910390a250565b336000908152600c602052604090205460ff166110d05760405162461bcd60e51b81526004016107b6906122db565b336000818152600e60205260409081902080543490810190915590517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9161109691612277565b60065481565b6015546040516370a0823160e01b81526000916001600160a01b0316906370a082319061114e903090600401612143565b60206040518083038186803b15801561116657600080fd5b505afa15801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e919061208a565b905090565b606060096000018054806020026020016040519081016040528092919081815260200182805480156111fe57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111e0575b5050505050905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112505760405162461bcd60e51b81526004016107b690612417565b61094e8282611b59565b600854600780546001600160a01b036101009182900481166000908152600e602090815260408083208054909701909655845484900483168252600a905293909320805460ff191660011790559054600b926112b992909104166113a7565b815481106112c357fe5b600091825260209091200180546001600160a01b03191690556007546008546006546040516101009093046001600160a01b0316927fff8ab71428121b903312f0811ef90ea93038df4601bb6c494a2f185b39c3eb3d92611325929091612135565b60405180910390a2611335611bc4565b565b6013546060906001600160a01b031663d06ca61f83610b4d611bfb565b6000600560035460ff16600581111561136957fe5b14806113855750600460035460ff16600581111561138357fe5b145b1561139257506000610b2d565b50600190565b6015546001600160a01b031681565b6001600160a01b03166000908152600d602052604090205490565b6000600960000182815481106113d457fe5b6000918252602090912001546001600160a01b031692915050565b6009546000190190565b6003805460ff19166004179055565b60155460135460405163095ea7b360e01b81526000926001600160a01b039081169263095ea7b39261144292909116908690600401612157565b602060405180830381600087803b15801561145c57600080fd5b505af1158015611470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114949190612031565b6114b05760405162461bcd60e51b81526004016107b69061247c565b601354604051629d473b60e21b815260009182916001600160a01b03909116906302751cec906115059073c7ad46e0b8a400bb3c915120d284aafba8fc4735908890869081903090600f4201906004016121da565b6040805180830381600087803b15801561151e57600080fd5b505af1158015611532573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155691906120a2565b90925090506115648261182e565b604051910190339082156108fc029083906000818181858888f19350505050158015611594573d6000803e3d6000fd5b509392505050565b336000908152600c602052604090205460ff166115cb5760405162461bcd60e51b81526004016107b6906122db565b336000818152600e60205260409081902080543490810190915590517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9161161291612277565b60405180910390a2565b60075461010090046001600160a01b031681565b6014546001600160a01b031681565b60045481565b6001600160a01b03166000908152600e602052604090205490565b6014546040516370a0823160e01b81526000916001600160a01b0316906370a082319061114e903090600401612143565b600554600e60006116a1816113c2565b6001600160a01b03166001600160a01b031681526020019081526020016000205410156116e05760405162461bcd60e51b81526004016107b6906124a5565b6116e8611354565b6117045760405162461bcd60e51b81526004016107b6906123e0565b61170c6113ef565b600654141561171d5761171d6113f9565b6003805460ff1916600190811790915560065460405190917eae53892a7e4a911f143a0d9408a85b5e15f8bed5c739920096daafb3362cce91611612919061226c565b60006002547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016117b19190612143565b60206040518083038186803b1580156117c957600080fd5b505afa1580156117dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611801919061208a565b101561181f5760405162461bcd60e51b81526004016107b690612395565b610bbe60015460025484611cda565b60008061183a83611337565b60018151811061184657fe5b602090810291909101015160145460135460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926118899216908790600401612157565b602060405180830381600087803b1580156118a357600080fd5b505af11580156118b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118db9190612031565b6118f75760405162461bcd60e51b81526004016107b69061247c565b6013546001600160a01b03166318cbafe58483611912611bfb565b30426040518663ffffffff1660e01b8152600401611934959493929190612586565b600060405180830381600087803b15801561194e57600080fd5b505af1158015611962573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261198a9190810190611f9e565b5092915050565b6040805160028082526060808301845292839291906020830190803683375050601354604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c464892506004808301926020929190829003018186803b1580156119f957600080fd5b505afa158015611a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a319190611eda565b81600081518110611a3e57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505073c7ad46e0b8a400bb3c915120d284aafba8fc473581600181518110611a8057fe5b6001600160a01b0390921660209283029190910190910152905090565b6000600f420181611aad84610b30565b600181518110611ab957fe5b60209081029190910101516013549091506001600160a01b031663fb3bdb418583611ae2611991565b30876040518663ffffffff1660e01b8152600401611b039493929190612551565b6000604051808303818588803b158015611b1c57600080fd5b505af1158015611b30573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526115949190810190611f9e565b6000600654611b666113ef565b0390506000818381611b7457fe5b06600101905060096002018181548110611b8a57fe5b600091825260209091200154600780546001600160a01b0390921661010002610100600160a81b0319909216919091179055610d5461125a565b6006546040517f397602cd08be1b4960422dd722f67856ee9d9282d988fcbfc3004f6a765bb0ce90600090a2600680546001019055565b60408051600280825260608083018452928392919060208301908036833701905050905073c7ad46e0b8a400bb3c915120d284aafba8fc473581600081518110611c4157fe5b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b158015611c9557600080fd5b505afa158015611ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccd9190611eda565b81600181518110611a8057fe5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f0000000000000000000000000000000000000000000000000000000000000000858786604051602001611d40929190612135565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401611d6d93929190612170565b602060405180830381600087803b158015611d8757600080fd5b505af1158015611d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbf9190612031565b506000611de08584306000808a815260200190815260200160002054611e25565b600086815260208190526040902054909150611e0390600163ffffffff611e5f16565b600086815260208190526040902055611e1c8582611e8b565b95945050505050565b600084848484604051602001611e3e9493929190612280565b60408051601f19818403018152919052805160209091012095945050505050565b600082820183811015611e845760405162461bcd60e51b81526004016107b6906122a4565b9392505050565b60008282604051602001611ea0929190612135565b60405160208183030381529060405280519060200120905092915050565b600060208284031215611ecf578081fd5b8135611e8481612609565b600060208284031215611eeb578081fd5b8151611e8481612609565b60008060408385031215611f08578081fd5b823567ffffffffffffffff811115611f1e578182fd5b80840185601f820112611f2f578283fd5b80359150611f44611f3f836125e9565b6125c2565b808382526020808301925080840189828388028701011115611f64578687fd5b8694505b85851015611f8f578035611f7b81612609565b845260019490940193928101928101611f68565b50909896013596505050505050565b60006020808385031215611fb0578182fd5b825167ffffffffffffffff811115611fc6578283fd5b80840185601f820112611fd7578384fd5b80519150611fe7611f3f836125e9565b8281528381019082850185850284018601891015612003578687fd5b8693505b84841015612025578051835260019390930192918501918501612007565b50979650505050505050565b600060208284031215612042578081fd5b81518015158114611e84578182fd5b60008060408385031215612063578182fd5b50508035926020909101359150565b600060208284031215612083578081fd5b5035919050565b60006020828403121561209b578081fd5b5051919050565b600080604083850312156120b4578182fd5b505080516020909101519092909150565b6000806000606084860312156120d9578081fd5b8351925060208401519150604084015190509250925092565b6000815180845260208085019450808401835b8381101561212a5781516001600160a01b031687529582019590820190600101612105565b509495945050505050565b918252602082015260400190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b600060018060a01b038516825260208481840152606060408401528351806060850152825b818110156121b157858101830151858201608001528201612195565b818111156121c25783608083870101525b50601f01601f19169290920160800195945050505050565b6001600160a01b039687168152602081019590955260408501939093526060840191909152909216608082015260a081019190915260c00190565b600060208252611e8460208301846120f2565b6020808252825182820181905260009190848201906040850190845b8181101561226057835183529284019291840191600101612244565b50909695505050505050565b901515815260200190565b90815260200190565b93845260208401929092526001600160a01b03166040830152606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526057908201527f55736572206e6f742072656769737465726564207769746820746865206b697460408201527f747920706172747920636f6e74726163742c206b696e646c7920636865636b2060608201527f7769746820796f7572206b69747479206b726561746f72000000000000000000608082015260a00190565b60208082526017908201527f4e6f7420696e20636f6c6c656374696f6e207374617465000000000000000000604082015260600190565b6020808252602b908201527f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060408201526a1dda5d1a0819985d58d95d60aa1b606082015260800190565b60208082526019908201527f4b69747479205061727479206973206e6f742041637469766500000000000000604082015260600190565b6020808252601f908201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00604082015260600190565b602080825260149082015273496e73756666696369656e742042616c616e636560601b604082015260600190565b6020808252600f908201526e30b8383937bb32903330b4b632b21760891b604082015260600190565b60208082526034908201527f496e73756666696369656e742046756e64732c206b696e646c7920746f7020756040820152731c081d1a19481cdb585c9d0818dbdb9d1c9858dd60621b606082015260800190565b825481526001830154602082015260028301546001600160a01b031660408201526003909201546060830152608082015260a00190565b60008382526040602083015261254960408301846120f2565b949350505050565b60008582526080602083015261256a60808301866120f2565b6001600160a01b03949094166040830152506060015292915050565b600086825285602083015260a060408301526125a560a08301866120f2565b6001600160a01b0394909416606083015250608001529392505050565b60405181810167ffffffffffffffff811182821017156125e157600080fd5b604052919050565b600067ffffffffffffffff8211156125ff578081fd5b5060209081020190565b6001600160a01b038116811461261e57600080fd5b5056fea2646970667358221220b5153237cb0960d5cf6e46106d87469055b937727a191e3ee9e5682060e1aa3464736f6c63430006070033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"kittenAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"roundNumber","type":"uint256"}],"name":"CollectedFromKitten","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"completedState","type":"bool"}],"name":"Completed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"winner","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountWon","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"roundNumber","type":"uint256"}],"name":"LotteryWinner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"roundNumber","type":"uint256"}],"name":"RoundCompled","type":"event"},{"anonymous":false,"inputs":[{"components":[{"internalType":"uint256","name":"kreatorSecurity","type":"uint256"},{"internalType":"uint256","name":"kittenPool","type":"uint256"},{"internalType":"address","name":"stakeTokenAddress","type":"address"},{"internalType":"uint256","name":"noOfStakeTokens","type":"uint256"}],"indexed":false,"internalType":"struct KittyParty.StakeInfo","name":"stakeDetails","type":"tuple"},{"indexed":false,"internalType":"uint256","name":"roundNumber","type":"uint256"}],"name":"Staked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"verificationState","type":"bool"},{"indexed":true,"internalType":"uint256","name":"roundNumber","type":"uint256"}],"name":"Verified","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}],"name":"Withdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"roundNumber","type":"uint256"}],"name":"WithdrawnFromStaking","type":"event"},{"inputs":[{"internalType":"address","name":"value","type":"address"}],"name":"add","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"daiAmountIn","type":"uint256"}],"name":"addLiquidityFromDai","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"ethAmountIn","type":"uint256"}],"name":"addLiquidityFromEth","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"amountPerRound","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"amountWon","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"checkDaiBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"checkUniBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"collectFromKittens","outputs":[{"internalType":"uint256","name":"amountCollected","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"collection","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"completeKittyParty","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentRound","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"dai","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositAmount","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"ad","type":"address"}],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"ethAmount","type":"uint256"}],"name":"getEstimatedDAIforETH","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"daiAmount","type":"uint256"}],"name":"getEstimatedETHforDAI","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"ad","type":"address"}],"name":"getIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getList","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"i","type":"uint256"}],"name":"getValueAt","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"memberAddress","type":"address[]"},{"internalType":"uint256","name":"_amountPerRound","type":"uint256"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isKittyPartyActive","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"randomness","type":"uint256"}],"name":"rawFulfillRandomness","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"uniAmountOut","type":"uint256"}],"name":"removeLiquidityFromDai","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"uniAmountOut","type":"uint256"}],"name":"removeLiquidityFromEth","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"roundDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"userProvidedSeed","type":"uint256"}],"name":"runLottery","outputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"sendMoneyToWinner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"staked","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"uni_token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"uniswapRouter","outputs":[{"internalType":"contract IUniswapV2Router02","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"verify","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"winnerAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawFromStaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]}